@using Radzen.Blazor
@using RadzenBlazorDemos.Pages
@using RadzenBlazorDemos.Data
@using RadzenBlazorDemos.Models.Northwind
@using Microsoft.EntityFrameworkCore
@inherits DbContextPage

<h3>Northwind Sales Analysis Pivot Table</h3>
<p>This example shows sales data from Northwind database grouped by Category/Product (rows) and Ship Country/Order Year (columns) with aggregated values.</p>

<RadzenCard Variant="Variant.Outlined" class="rz-my-4">
    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center">
        <RadzenSwitch @bind-Value=@showColumnsTotals Name="ShowColumnsTotals" TValue="bool" />
        <RadzenLabel Text="Show columns totals" Component="ShowColumnsTotals" />
        <RadzenSwitch @bind-Value=@showRowsTotals Name="ShowRowsTotals" TValue="bool" />
        <RadzenLabel Text="Show rows totals" Component="ShowRowsTotals" />
        <RadzenSwitch @bind-Value=@allowDrillDown Name="AllowDrillDown" TValue="bool" />
        <RadzenLabel Text="Allow drill-down" Component="AllowDrillDown" />
        <RadzenSwitch @bind-Value=@allowPaging Name="AllowPaging" TValue="bool" />
        <RadzenLabel Text="AllowPaging" Component="AllowPaging" />
        <RadzenDropDown @bind-Value="@pagerPosition" Visible="@allowPaging" TextProperty="Text" Name="PagerPosition" ValueProperty="Value" 
                Data="@(Enum.GetValues(typeof(PagerPosition)).Cast<PagerPosition>().Select(t => new { Text = $"{t}", Value = t }))" />
    </RadzenStack>
</RadzenCard>

<RadzenPivotDataGrid Data=@salesData TItem="SalesData" Style="height:500px"
        AllowPaging="@allowPaging" PagerPosition="@pagerPosition" PageSize="20"
        ShowColumnsTotals="@showColumnsTotals" ShowRowsTotals="@showRowsTotals" AllowDrillDown="@allowDrillDown"
        GridLines="Radzen.DataGridGridLines.Default" AllowAlternatingRows="true">
    <Columns>
        <RadzenPivotColumn TItem="SalesData" Property="OrderYear" Title="Order Year" Width="150px" />
        <RadzenPivotColumn TItem="SalesData" Property="ShipCountry" Title="Ship Country" Width="150px" />
    </Columns>
    <Rows>
        <RadzenPivotRow TItem="SalesData" Property="CategoryName" Title="Product Category" />
        <RadzenPivotRow TItem="SalesData" Property="ProductName" Title="Product" />
    </Rows>
    <Aggregates>
        <RadzenPivotAggregate TItem="SalesData" Property="TotalAmount" Title="Total Sales"
                            Aggregate="AggregateFunction.Sum" FormatString="{0:C}" />
        <RadzenPivotAggregate TItem="SalesData" Property="Quantity" Title="Quantity Sold"
                            Aggregate="AggregateFunction.Sum">
            <Template>
                Qty: @(context ?? 0)
            </Template>
            <ColumnTotalTemplate>
                Total: @(context ?? 0)
            </ColumnTotalTemplate>
            <RowTotalTemplate>
                Total: @(context ?? 0)
            </RowTotalTemplate>
        </RadzenPivotAggregate>
        <RadzenPivotAggregate TItem="SalesData" Property="UnitPrice" Title="Average Unit Price"
                            Aggregate="AggregateFunction.Average" FormatString="{0:C}" />
        <RadzenPivotAggregate TItem="SalesData" Property="Discount" Title="Average Discount"
                            Aggregate="AggregateFunction.Average" FormatString="{0:P}" />
    </Aggregates>
</RadzenPivotDataGrid>

<RadzenCard>
    <h4>Data Summary</h4>
    <div style="font-size: 14px;">
        <p><strong>Categories:</strong> @(salesData?.Select(s => s.CategoryName).Distinct().Count() ?? 0)</p>
        <p><strong>Products:</strong> @(salesData?.Select(s => s.ProductName).Distinct().Count() ?? 0)</p>
        <p><strong>Countries:</strong> @(salesData?.Select(s => s.ShipCountry).Distinct().Count() ?? 0)</p>
        <p><strong>Years:</strong> @(salesData?.Select(s => s.OrderYear).Distinct().Count() ?? 0)</p>
        <p><strong>Total Records:</strong> @(salesData?.Count() ?? 0)</p>
    </div>
</RadzenCard>

@code {
    bool allowDrillDown;
    bool showColumnsTotals;
    bool showRowsTotals;
    bool allowPaging = true;
    PagerPosition pagerPosition = PagerPosition.Bottom;

    private IEnumerable<SalesData> salesData;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // Create sales data from Northwind orders and order details
        salesData = (from od in dbContext.OrderDetails
                     join o in dbContext.Orders on od.OrderID equals o.OrderID
                     join p in dbContext.Products on od.ProductID equals p.ProductID
                     join c in dbContext.Categories on p.CategoryID equals c.CategoryID
                     select new SalesData
                         {
                             CategoryName = c.CategoryName,
                             ProductName = p.ProductName,
                             OrderYear = o.OrderDate.HasValue ? o.OrderDate.Value.Year : 0,
                             OrderMonth = o.OrderDate.HasValue ? o.OrderDate.Value.Month : 0,
                             ShipCountry = o.ShipCountry,
                             UnitPrice = od.UnitPrice ?? 0,
                             Quantity = od.Quantity ?? 0,
                             Discount = od.Discount ?? 0,
                             TotalAmount = (od.UnitPrice ?? 0) * (od.Quantity ?? 0) * (1 - (od.Discount ?? 0))
                         });
    }

    public class SalesData
    {
        public string CategoryName { get; set; }
        public string ProductName { get; set; }
        public int OrderYear { get; set; }
        public int OrderMonth { get; set; }
        public string ShipCountry { get; set; }
        public double UnitPrice { get; set; }
        public short Quantity { get; set; }
        public float Discount { get; set; }
        public double TotalAmount { get; set; }
    }
} 